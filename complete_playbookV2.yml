- name: Create Azure Resources for Docker Cluster and Monitoring
  hosts: localhost
  connection: local
  vars_files:
    - secrets.yml
  tasks:

    - name: Create resource group
      azure_rm_resourcegroup:
        name: A2S2_groep_04
        location: westeurope

    - name: Create virtual network
      azure_rm_virtualnetwork:
        resource_group: A2S2_groep_04
        name: DockerVnet
        address_prefixes: "10.0.0.0/16"

    - name: Add subnet
      azure_rm_subnet:
        resource_group: A2S2_groep_04
        name: DockerSubnet
        address_prefix: "10.0.1.0/24"
        virtual_network: DockerVnet

    - name: Create public IP for Grafana
      azure_rm_publicipaddress:
        resource_group: A2S2_groep_04
        allocation_method: Static
        name: GrafanaPublicIP
      register: grafana_ip

    - name: Create public IP for DockerMaster
      azure_rm_publicipaddress:
        resource_group: A2S2_groep_04
        allocation_method: Static
        name: DockerMasterPublicIP
      register: docker_master_ip

    - name: Create public IP for DockerWorker
      azure_rm_publicipaddress:
        resource_group: A2S2_groep_04
        allocation_method: Static
        name: DockerworkerPublicIP
      register: docker_worker_ip

    - name: Create public IP for HAProxy
      azure_rm_publicipaddress:
        resource_group: A2S2_groep_04
        allocation_method: Static
        name: HAProxyPublicIP
      register: haproxy_ip

    - name: Create Network Security Group for Grafana
      azure_rm_securitygroup:
        resource_group: A2S2_groep_04
        name: GrafanaNetworkSecurityGroup
        rules:
          - name: SSH
            protocol: Tcp
            destination_port_range: 22
            access: Allow
            priority: 1001
            direction: Inbound
          - name: Grafana
            protocol: Tcp
            destination_port_range: 3000
            access: Allow
            priority: 1002
            direction: Inbound

    # Security Groups for Docker Machines
    - name: Create Network Security Group for DockerMaster
      azure_rm_securitygroup:
        resource_group: A2S2_groep_04
        name: DockerMasterNSG
        rules:
          - name: SSH
            protocol: Tcp
            destination_port_range: 22
            access: Allow
            priority: 1001
            direction: Inbound
          - name: Docker-API
            protocol: Tcp
            destination_port_range: 2376
            access: Allow
            priority: 1002
            direction: Inbound

    - name: Create Network Security Group for DockerWorker
      azure_rm_securitygroup:
        resource_group: A2S2_groep_04
        name: DockerWorkerNSG
        rules:
          - name: SSH
            protocol: Tcp
            destination_port_range: 22
            access: Allow
            priority: 1001
            direction: Inbound

    - name: Create Network Security Group for HAProxy
      azure_rm_securitygroup:
        resource_group: A2S2_groep_04
        name: HAProxyNSG
        rules:
          - name: SSH
            protocol: Tcp
            destination_port_range: 22
            access: Allow
            priority: 1001
            direction: Inbound
          - name: Load_Balancer_HTTP
            protocol: Tcp
            destination_port_range: 80
            access: Allow
            priority: 1002
            direction: Inbound
          - name: Load_Balancer_MySQL
            protocol: Tcp
            destination_port_range: 3306
            access: Allow
            priority: 1003
            direction: Inbound

    - name: Create virtual network interface for Grafana
      azure_rm_networkinterface:
        resource_group: A2S2_groep_04
        name: GrafanaNIC
        virtual_network: DockerVnet
        subnet: DockerSubnet
        security_group: GrafanaNetworkSecurityGroup
        ip_forwarding: true
        ip_configurations:
          - name: GrafanaNICConfig
            public_ip_address_name: GrafanaPublicIP
            primary: true

    - name: Create virtual network interface for DockerMaster
      azure_rm_networkinterface:
        resource_group: A2S2_groep_04
        name: DockerMasterNIC
        virtual_network: DockerVnet
        subnet: DockerSubnet
        security_group: DockerMasterNSG
        ip_forwarding: true
        ip_configurations:
          - name: DockerMasterNICConfig
            public_ip_address_name: DockerMasterPublicIP
            primary: true

    - name: Create virtual network interface for DockerWorker
      azure_rm_networkinterface:
        resource_group: A2S2_groep_04
        name: DockerWorkerNIC
        virtual_network: DockerVnet
        subnet: DockerSubnet
        security_group: DockerWorkerNSG
        ip_forwarding: true
        ip_configurations:
          - name: DockerWorkerNICConfig
            public_ip_address_name: DockerWorkerPublicIP
            primary: true

    - name: Create virtual network interface for HAProxy
      azure_rm_networkinterface:
        resource_group: A2S2_groep_04
        name: HAProxyNIC
        virtual_network: DockerVnet
        subnet: DockerSubnet
        security_group: HAProxyNetworkSecurityGroup
        ip_forwarding: true
        ip_configurations:
          - name: HAProxyNICConfig
            public_ip_address_name: HAProxyPublicIP
            primary: true

    - name: Create Grafana VM
      azure_rm_virtualmachine:
        resource_group: A2S2_groep_04
        name: Grafana
        vm_size: Standard_B2ms
        admin_username: groep04_admin
        ssh_password_enabled: false
        ssh_public_keys:
          - path: /home/groep04_admin/.ssh/authorized_keys
            key_data: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDOb9+ikspIbepZpcRxM82HisORC5ihx4/WA4TkbkW+INYQj+8nBd8h11tbTY0jdY8wrBp+EdK6BXtzLC2oaQNnuHZNcQYLt+OgXvwrLG9usXNnkWL/yeJtSHCSoLXfVaENJn/ZaSm0DfEdJ2atF1a0yIEy9L23dmoaelnRH6k3nRpVMOk/I6yKBacUS2pUbsZMmdawhPo6zoUtCHse01+IGOpWKDvc+qZJvQge5ymOR577dTKi1dM1/370K8ZofzUqtLOnvqdNkZGjx2/dwm6ZIwWzhU8I3+TP10O6DDUV7IsNotzJ23AU5498ifaH2l0Qdf6sv3R3aUu4S/yfRQ0p dennis@ansible"
        managed_disk_type: Standard_LRS
        image:
          offer: 0001-com-ubuntu-server-jammy
          publisher: Canonical
          sku: 22_04-lts
          version: latest
        custom_data: |
          #cloud-config
          package_update: true
          package_upgrade: true
          packages:
            - apt-transport-https
            - software-properties-common
            - curl
            - wget
          write_files:
            - path: /etc/prometheus/prometheus.yml
              content: |
                global:
                  scrape_interval: 15s

                scrape_configs:
                  - job_name: 'kubernetes_nodes'
                    static_configs:
                      - targets:
                          - KubeMaster:9100
                          - KubeWorker:9100
          runcmd:
            - curl -fsSL https://packages.grafana.com/gpg.key | apt-key add -
            - add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
            - apt-get update && apt-get install -y grafana
            - systemctl start grafana-server
            - systemctl enable grafana-server
            - curl -LO https://github.com/prometheus/prometheus/releases/download/v2.45.0/prometheus-2.45.0.linux-amd64.tar.gz
            - tar -xzf prometheus-2.45.0.linux-amd64.tar.gz -C /usr/local/bin
            - mv /usr/local/bin/prometheus-2.45.0.linux-amd64 /usr/local/bin/prometheus
            - systemctl start prometheus
            - systemctl enable prometheus
            - grafana-cli plugins install grafana-piechart-panel
            - grafana-cli plugins install prometheus-datasource
            - systemctl restart grafana-server
            - curl -X POST http://admin:admin@localhost:3000/api/datasources \
              -H "Content-Type: application/json" \
              -d '{
                    "name": "Prometheus",
                    "type": "prometheus",
                    "url": "http://localhost:9090",
                    "access": "proxy",
                    "isDefault": true
                  }'

    - name: Create HAProxy VM
      azure_rm_virtualmachine:
        resource_group: A2S2_groep_04
        name: HAProxy
        vm_size: Standard_B2ms
        admin_username: groep04_admin
        ssh_password_enabled: false
        ssh_public_keys:
          - path: /home/groep04_admin/.ssh/authorized_keys
            key_data: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCmBK7ZQJdBiDFcJCzcIAIX5azgt3U/qEKgiOKspcv3zLtodeoqFeCzVA6gLkbknAhNFq2czjospX/qJ1vg3ASt/ccX17dnr1E97KV2P0FoawOS5jFqW1Nn3F4uqVpKAsUsSgmLQuRLY72NnY6K8DHuCnYvTTnQMf5h8ZQNinM5+1cw9IXy8oha2ev+lFixYsKqh81gAmLyfhfcEEsCdH8Vv7fz6FWDoXoBAY/gFcJJP2Xm6q9cMuC6f7Rl1swiY+JYlAU6sLTn9Y+Sscmfy9/plLRJYSQRH2vKjgqTUgHOs5bqyydufeO8/eEjszLSrFAmfg/MasTOHVv+q+fWnTRQJqGB8CiH3Cu3eMcO0nmGA2IXWgXQEb8+mn4s/IQah0ufts7yCFONxcM67W2xIJ2Ij8Ce99s8ORhfLNV2uH0iFsGxMp7MsmGX8E99i3xNMzAVdkYM55/USCHFBdbzD2yIYcj2K0RdIgt/AxGbtmDgR7qv1f4C7UGueCfQCGfzUo8= root@ansible"
        network_interfaces: HAProxyNIC
        managed_disk_type: Standard_LRS
        image:
          offer: 0001-com-ubuntu-server-jammy
          publisher: Canonical
          sku: 22_04-lts
          version: latest
        custom_data: |
          #cloud-config
          package_update: true
          package_upgrade: true
          packages:
            - haproxy
            - socat
            - curl
          write_files:
            - path: /etc/haproxy/haproxy.cfg
              content: |
                global
                  log /dev/log local0
                  log /dev/log local1 notice
                  maxconn 4096
                  daemon

                defaults
                  log global
                  option tcplog
                  option httplog
                  option redispatch
                  retries 3
                  timeout connect 5s
                  timeout client  50s
                  timeout server  50s

                frontend http_front
                  bind *:80
                  default_backend web_servers

                backend web_servers
                  balance roundrobin
                  server-template webserver- 5 nginx.default.svc.cluster.local:80 check

                frontend db_front
                  bind *:3306
                  default_backend db_servers

                backend db_servers
                  balance roundrobin
                  server-template dbserver- 5 mariadb.default.svc.cluster.local:3306 check
          runcmd:
            - systemctl restart haproxy
            - systemctl enable haproxy

- name: Install Docker on DockerMaster
  hosts: DockerMaster
  become: yes
  tasks:
    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes

    - name: Add Docker official GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Set up the Docker repository
      shell: |
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    - name: Install Docker Engine
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes

    - name: Start and enable Docker service
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Add user to Docker group
      user:
        name: groep04_admin
        groups: docker
        append: yes

- name: Initialize Docker Swarm on DockerMaster
  hosts: DockerMaster
  become: yes
  tasks:
    - name: Initialize Docker Swarm
      shell: |
        if ! docker info | grep -q "Swarm: active"; then
          docker swarm init --advertise-addr $(hostname -I | awk '{print $1}')
        fi
      args:
        executable: /bin/bash
      register: swarm_init
      changed_when: "'This node is already part of a swarm' not in swarm_init.stdout"

    - name: Get Swarm join token
      shell: docker swarm join-token worker -q
      register: swarm_worker_token

    - name: Debug Swarm token
      debug:
        msg: "Swarm token: {{ swarm_worker_token.stdout }}"

- name: Create DockerWorker VM
  hosts: localhost
  tasks:
    - name: Deploy DockerWorker VM
      azure_rm_virtualmachine:
        resource_group: A2S2_groep_04
        name: DockerWorker
        vm_size: Standard_B2ms
        admin_username: groep04_admin
        ssh_password_enabled: false
        ssh_public_keys:
          - path: /home/groep04_admin/.ssh/authorized_keys
            key_data: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC2IFiePXmnOeDEPmss1v8krYsPtxEUsWkRUuiY+Xyy+RQu1MpWGZ2eGe6glcxsmkV6SJWV8eMVEXXPELPfS3QBS20NY77D9lswPt2bKkio85mGYb+u1yaT9DGnUYjswAXO8kRBbjkTvgnS1bgFolrHBsKEeR4f8QsqU94/6Tosf61/8LDoEcHaOSYSGRayK8oHWa3aJjBY7ul8k36HUpP9omEQuJJ3Rtw9IFOoRm9sGbb4XUxMtj0h4DlaF3E8XivIpG3EUeP9Rclg2E8YuTznebJjobK8Rl9AqWhbY4fI7oqf1RpsjRNuY+cuQ4wAiw5n7U3LuCntZMK8uoEEAsvT6nzP6cJe6mjBuELe5l62bpNlPlPTcyu/agdIivyqKUlbJ96YgPPaUFu+4c+v/9tyt/JHcdb4QSkDaIz/tqBrS7bpLA42PIq7kZH/B0sShuS8p/utf2XNSDvmFg3yPMlfGbHu+dxymISbxgxo3+qDoV9vzF5IOQPC0Bwx3uDbN+/cVu4oVqqVCzw8ajtJnPbJGTFECl4sZXNfRkwKhznnDyxS4u/Pnej6lMUmbqwoFcBJHa+0Vb81vqMPl5xu0tfEeleph35fNFNaYQUP3Y6TC5qR2t0NzTZ6yvfG4xj1/9GKgb+XKJ+5qfZj63tUiK80AagXiCYms4CxdOEblpwRfw== dennis@ansible"
        network_interfaces: DockerWorkerNIC
        managed_disk_type: Standard_LRS
        image:
          offer: 0001-com-ubuntu-server-jammy
          publisher: Canonical
          sku: 22_04-lts
          version: latest
        custom_data: |
          #cloud-config
          package_update: true
          package_upgrade: true
          packages:
            - docker.io
            - docker-compose
          runcmd:
            - systemctl enable docker
            - systemctl start docker
            - usermod -aG docker groep04_admin
            - apt-get install -y python3-pip
            - pip3 install docker-compose
            - echo "Docker Worker node is ready."

- name: Join DockerWorker to Swarm
  hosts: DockerWorker
  become: yes
  tasks:
    - name: Ensure Docker is Installed
      apt:
        name:
          - docker.io
          - docker-compose
        state: present
        update_cache: yes

    - name: Fetch Swarm Join Token
      set_fact:
        worker_token: "{{ hostvars['DockerMaster']['swarm_worker_token'].stdout }}"

    - name: Join DockerWorker to Swarm
      shell: |
        if ! docker info | grep -q "Swarm: active"; then
          docker swarm join --token {{ worker_token }} $(hostname -I | awk '{print $1}'):2377
        fi
      args:
        executable: /bin/bash