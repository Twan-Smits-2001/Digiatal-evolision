- name: Create Azure Resources for Kubernetes Cluster and Grafana Monitoring
  hosts: localhost
  connection: local
  vars_files:
    - secrets.yml
  tasks:

    - name: Create resource group
      azure_rm_resourcegroup:
        name: A2S2_groep_04
        location: westeurope

    - name: Create virtual network
      azure_rm_virtualnetwork:
        resource_group: A2S2_groep_04
        name: KubeVnet
        address_prefixes: "10.0.0.0/16"

    - name: Add subnet
      azure_rm_subnet:
        resource_group: A2S2_groep_04
        name: KubeSubnet
        address_prefix: "10.0.1.0/24"
        virtual_network: KubeVnet

    - name: Create public IP for Grafana
      azure_rm_publicipaddress:
        resource_group: A2S2_groep_04
        allocation_method: Static
        name: GrafanaPublicIP
      register: grafana_ip

    - name: Create public IP for KubeMaster
      azure_rm_publicipaddress:
        resource_group: A2S2_groep_04
        allocation_method: Static
        name: KubeMasterPublicIP
      register: kube_master_ip

    - name: Create public IP for KubeWorker
      azure_rm_publicipaddress:
        resource_group: A2S2_groep_04
        allocation_method: Static
        name: KubeWorkerPublicIP
      register: kube_worker_ip

    - name: Create public IP for HAProxy
      azure_rm_publicipaddress:
        resource_group: A2S2_groep_04
        allocation_method: Static
        name: HAProxyPublicIP
      register: haproxy_ip

    - name: Create Network Security Group for Grafana
      azure_rm_securitygroup:
        resource_group: A2S2_groep_04
        name: GrafanaNetworkSecurityGroup
        rules:
          - name: SSH
            protocol: Tcp
            destination_port_range: 22
            access: Allow
            priority: 1001
            direction: Inbound
          - name: Grafana
            protocol: Tcp
            destination_port_range: 3000
            access: Allow
            priority: 1002
            direction: Inbound

    - name: Create Network Security Group for KubeMaster
      azure_rm_securitygroup:
        resource_group: A2S2_groep_04
        name: KubeMasterNSG
        rules:
          - name: SSH
            protocol: Tcp
            destination_port_range: 22
            access: Allow
            priority: 1001
            direction: Inbound
          - name: Kubernetes_API
            protocol: Tcp
            destination_port_range: 6443
            access: Allow
            priority: 1002
            direction: Inbound

    - name: Create Network Security Group for KubeWorker
      azure_rm_securitygroup:
        resource_group: A2S2_groep_04
        name: KubeWorkerNSG
        rules:
          - name: SSH
            protocol: Tcp
            destination_port_range: 22
            access: Allow
            priority: 1001
            direction: Inbound

    - name: Create Network Security Group for HAProxy
      azure_rm_securitygroup:
        resource_group: A2S2_groep_04
        name: HAProxyNetworkSecurityGroup
        rules:
          - name: SSH
            protocol: Tcp
            destination_port_range: 22
            access: Allow
            priority: 1001
            direction: Inbound
          - name: Load_Balancer_HTTP
            protocol: Tcp
            destination_port_range: 80
            access: Allow
            priority: 1002
            direction: Inbound
          - name: Load_Balancer_MySQL
            protocol: Tcp
            destination_port_range: 3306
            access: Allow
            priority: 1003
            direction: Inbound

    - name: Create virtual network interface for Grafana
      azure_rm_networkinterface:
        resource_group: A2S2_groep_04
        name: GrafanaNIC
        virtual_network: KubeVnet
        subnet: KubeSubnet
        security_group: GrafanaNetworkSecurityGroup
        ip_forwarding: true
        ip_configurations:
          - name: GrafanaNICConfig
            public_ip_address_name: GrafanaPublicIP
            primary: true

    - name: Create virtual network interface for KubeMaster
      azure_rm_networkinterface:
        resource_group: A2S2_groep_04
        name: KubeMasterNIC
        virtual_network: KubeVnet
        subnet: KubeSubnet
        security_group: KubeMasterNSG
        ip_forwarding: true
        ip_configurations:
          - name: KubeMasterNICConfig
            public_ip_address_name: KubeMasterPublicIP
            primary: true

    - name: Create virtual network interface for KubeWorker
      azure_rm_networkinterface:
        resource_group: A2S2_groep_04
        name: KubeWorkerNIC
        virtual_network: KubeVnet
        subnet: KubeSubnet
        security_group: KubeWorkerNSG
        ip_forwarding: true
        ip_configurations:
          - name: KubeWorkerNICConfig
            public_ip_address_name: KubeWorkerPublicIP
            primary: true

    - name: Create virtual network interface for HAProxy
      azure_rm_networkinterface:
        resource_group: A2S2_groep_04
        name: HAProxyNIC
        virtual_network: KubeVnet
        subnet: KubeSubnet
        security_group: HAProxyNetworkSecurityGroup
        ip_forwarding: true
        ip_configurations:
          - name: HAProxyNICConfig
            public_ip_address_name: HAProxyPublicIP
            primary: true

    - name: Create Grafana VM
      azure_rm_virtualmachine:
        resource_group: A2S2_groep_04
        name: Grafana
        vm_size: Standard_B2ms
        admin_username: groep04_admin
        ssh_password_enabled: false
        ssh_public_keys:
          - path: /home/groep04_admin/.ssh/authorized_keys
            key_data: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDOb9+ikspIbepZpcRxM82HisORC5ihx4/WA4TkbkW+INYQj+8nBd8h11tbTY0jdY8wrBp+EdK6BXtzLC2oaQNnuHZNcQYLt+OgXvwrLG9usXNnkWL/yeJtSHCSoLXfVaENJn/ZaSm0DfEdJ2atF1a0yIEy9L23dmoaelnRH6k3nRpVMOk/I6yKBacUS2pUbsZMmdawhPo6zoUtCHse01+IGOpWKDvc+qZJvQge5ymOR577dTKi1dM1/370K8ZofzUqtLOnvqdNkZGjx2/dwm6ZIwWzhU8I3+TP10O6DDUV7IsNotzJ23AU5498ifaH2l0Qdf6sv3R3aUu4S/yfRQ0p dennis@ansible"
        managed_disk_type: Standard_LRS
        image:
          offer: 0001-com-ubuntu-server-jammy
          publisher: Canonical
          sku: 22_04-lts
          version: latest
        custom_data: |
          #cloud-config
          package_update: true
          package_upgrade: true
          packages:
            - apt-transport-https
            - software-properties-common
            - curl
            - wget
          write_files:
            - path: /etc/prometheus/prometheus.yml
              content: |
                global:
                  scrape_interval: 15s

                scrape_configs:
                  - job_name: 'kubernetes_nodes'
                    static_configs:
                      - targets:
                          - KubeMaster:9100
                          - KubeWorker:9100
          runcmd:
            - curl -fsSL https://packages.grafana.com/gpg.key | apt-key add -
            - add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
            - apt-get update && apt-get install -y grafana
            - systemctl start grafana-server
            - systemctl enable grafana-server
            - curl -LO https://github.com/prometheus/prometheus/releases/download/v2.45.0/prometheus-2.45.0.linux-amd64.tar.gz
            - tar -xzf prometheus-2.45.0.linux-amd64.tar.gz -C /usr/local/bin
            - mv /usr/local/bin/prometheus-2.45.0.linux-amd64 /usr/local/bin/prometheus
            - systemctl start prometheus
            - systemctl enable prometheus
            - grafana-cli plugins install grafana-piechart-panel
            - grafana-cli plugins install prometheus-datasource
            - systemctl restart grafana-server
            - curl -X POST http://admin:admin@localhost:3000/api/datasources \
              -H "Content-Type: application/json" \
              -d '{
                    "name": "Prometheus",
                    "type": "prometheus",
                    "url": "http://localhost:9090",
                    "access": "proxy",
                    "isDefault": true
                  }'

    - name: Verify root access
      shell: whoami
      register: root_check
      delegate_to: KubeMaster
      become: true

    - name: Debug root access
      debug:
        msg: "Current user: {{ root_check.stdout }}"

    - name: Fail if not root
      fail:
        msg: "Failed to obtain root access. Ensure 'become' is configured correctly."
      when: root_check.stdout != "root"

    - name: Install kubectl using snap
      shell: sudo snap install kubectl --classic
      delegate_to: KubeMaster
      become: true

    - name: Verify kubectl installation
      shell: which kubectl
      delegate_to: KubeMaster
      become: true
      register: kubectl_path

    - name: Debug kubectl path
      debug:
        msg: "kubectl is installed at {{ kubectl_path.stdout }}"

    - name: Create KubeMaster VM and Deploy Applications
      azure_rm_virtualmachine:
        resource_group: A2S2_groep_04
        name: KubeMaster
        vm_size: Standard_B2ms
        admin_username: groep04_admin
        ssh_password_enabled: false
        ssh_public_keys:
          - path: /home/groep04_admin/.ssh/authorized_keys
            key_data: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDEe4+H2IPFZnmwe57hlv3fwLu4yn6ZiiWZhaijnbDXG7kMOo19IV2nhSZ1LAFOYU54XZS55oTGUH5C21tThG0lwwrXJl21Z9PtAENSBiscgcjXR6m8+U65Cis7L6Mrorll18VxMETiSjyhaFD+liL/PHgvcE3c9rrFdlfwh5niGJqYoW6ARhZu7xahy2Y1UO7zVRJ2ciG21lZtMU3DuSi601lbIq2t/am+NrKxRbVikBSVwWdVv0UGUKGdK0k92Xrhh2VTflgXOMUmEVeDeFySWBUKysBgg4nJE8VoCzwKKatKHOnlphPhcNCbY6MmynwZZnkzMWfV6JbeGHB7dqaLEc1Ds9Oy/ZiNJRxo31AkpjwT+shE5DUnfrpClCvQIa5VYOBWPRyr1s8aCvjkv2TKOHr3EDiOOILm2mY9STPs2dunpa67pU07U3Qi9WKVqxraG8lfuLtzd8TTi92Uihjta90jnYR/GvyuZNOQ6ZfDB4hHPXEV40GGfEbf+TUpUQNsfy1ZGDjqRjrTJoSr5ajT7tjvXGGGqn1QvRIpBVe+xUskVXzib30wDppObidQ2AJ6MbK41HMk5z7SP8mY7Ho/imXIsaJ12XJjbIXt7rkJcvQKFDceCTo+jgR70ts4YEDF518a3yM/rO3CWr9ILtOMXE9LfWxPhk77pRHCG6gX+w== dennis@ansible"
        network_interfaces: KubeMasterNIC
        managed_disk_type: Standard_LRS
        image:
          offer: 0001-com-ubuntu-server-jammy
          publisher: Canonical
          sku: 22_04-lts
          version: latest
        custom_data: |
          #cloud-config
          package_update: true
          package_upgrade: true
          packages:
            - apt-transport-https
            - ca-certificates
            - curl
            - kubeadm
          runcmd:
            - echo "Initializing Kubernetes master node..."
            - kubeadm init --pod-network-cidr=10.244.0.0/16 | tee /var/log/kubeadm-init.log || echo "Failed to initialize Kubernetes"
            - echo "Creating kube config for the admin user..."
            - mkdir -p /home/groep04_admin/.kube
            - cp -i /etc/kubernetes/admin.conf /home/groep04_admin/.kube/config
            - chown -R groep04_admin:groep04_admin /home/groep04_admin/.kube
            - echo "Applying Flannel CNI plugin..."
            - kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml || echo "Failed to apply Flannel"
            - echo "Deploying nginx..."
            - kubectl create deployment nginx --image=nginx || echo "Failed to deploy nginx"
            - kubectl expose deployment nginx --port=80 --target-port=80 --type=ClusterIP || echo "Failed to expose nginx"
            - echo "Deploying MariaDB..."
            - kubectl create deployment mariadb --image=mariadb || echo "Failed to deploy MariaDB"
            - kubectl expose deployment mariadb --port=3306 --target-port=3306 --type=ClusterIP || echo "Failed to expose MariaDB"
            - kubectl set env deployment/mariadb MYSQL_ROOT_PASSWORD=root || echo "Failed to set MariaDB environment variables"
            - echo "Installing and starting Prometheus Node Exporter..."
            - apt-get install -y prometheus-node-exporter || echo "Failed to install Node Exporter"
            - systemctl enable prometheus-node-exporter || echo "Failed to enable Node Exporter"
            - systemctl start prometheus-node-exporter || echo "Failed to start Node Exporter"

    - name: Install Flannel Network Plugin
      shell: |
        export PATH=$PATH:/snap/bin
        kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml --validate=false
      delegate_to: KubeMaster
      become: true



    - name: Create HAProxy VM
      azure_rm_virtualmachine:
        resource_group: A2S2_groep_04
        name: HAProxy
        vm_size: Standard_B2ms
        admin_username: groep04_admin
        ssh_password_enabled: false
        ssh_public_keys:
          - path: /home/groep04_admin/.ssh/authorized_keys
            key_data: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCmBK7ZQJdBiDFcJCzcIAIX5azgt3U/qEKgiOKspcv3zLtodeoqFeCzVA6gLkbknAhNFq2czjospX/qJ1vg3ASt/ccX17dnr1E97KV2P0FoawOS5jFqW1Nn3F4uqVpKAsUsSgmLQuRLY72NnY6K8DHuCnYvTTnQMf5h8ZQNinM5+1cw9IXy8oha2ev+lFixYsKqh81gAmLyfhfcEEsCdH8Vv7fz6FWDoXoBAY/gFcJJP2Xm6q9cMuC6f7Rl1swiY+JYlAU6sLTn9Y+Sscmfy9/plLRJYSQRH2vKjgqTUgHOs5bqyydufeO8/eEjszLSrFAmfg/MasTOHVv+q+fWnTRQJqGB8CiH3Cu3eMcO0nmGA2IXWgXQEb8+mn4s/IQah0ufts7yCFONxcM67W2xIJ2Ij8Ce99s8ORhfLNV2uH0iFsGxMp7MsmGX8E99i3xNMzAVdkYM55/USCHFBdbzD2yIYcj2K0RdIgt/AxGbtmDgR7qv1f4C7UGueCfQCGfzUo8= root@ansible"
        network_interfaces: HAProxyNIC
        managed_disk_type: Standard_LRS
        image:
          offer: 0001-com-ubuntu-server-jammy
          publisher: Canonical
          sku: 22_04-lts
          version: latest
        custom_data: |
          #cloud-config
          package_update: true
          package_upgrade: true
          packages:
            - haproxy
            - socat
            - curl
          write_files:
            - path: /etc/haproxy/haproxy.cfg
              content: |
                global
                  log /dev/log local0
                  log /dev/log local1 notice
                  maxconn 4096
                  daemon

                defaults
                  log global
                  option tcplog
                  option httplog
                  option redispatch
                  retries 3
                  timeout connect 5s
                  timeout client  50s
                  timeout server  50s

                frontend http_front
                  bind *:80
                  default_backend web_servers

                backend web_servers
                  balance roundrobin
                  server-template webserver- 5 nginx.default.svc.cluster.local:80 check

                frontend db_front
                  bind *:3306
                  default_backend db_servers

                backend db_servers
                  balance roundrobin
                  server-template dbserver- 5 mariadb.default.svc.cluster.local:3306 check
          runcmd:
            - systemctl restart haproxy
            - systemctl enable haproxy
